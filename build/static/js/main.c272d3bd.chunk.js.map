{"version":3,"sources":["constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","assets/twitter-logo.svg","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","HP","toNumber","maxHP","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFTs","characterNFT","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacter","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHP","newPlayerHP","bossHP","playerHP","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","fetchNFTMetadata","provider","MyEpicGame","txn","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4tvFAAMA,G,MAAmB,8CAEnBC,EAAyB,SAACC,GAC9B,MAAO,CACLC,KAAcD,EAAcC,KAC5BC,SAAcF,EAAcE,SAC5BC,GAAcH,EAAcG,GAAGC,WAC/BC,MAAcL,EAAcK,MAAMD,WAClCE,aAAcN,EAAcM,aAAaF,a,uCCM9BG,EAXU,WACvB,OACE,sBAAKC,UAAU,WAAf,UACE,wBACA,wBACA,wBACA,4BC8HSC,EA/HS,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAgDJ,oBAAS,GAAzD,mBAAOK,EAAP,KAAyBC,EAAzB,KAqBAC,qBAAU,WACR,IAAQC,EAAaC,OAAbD,SACR,GAAIA,EAAU,CACZ,IACME,EADW,IAAIC,IAAOC,UAAUC,aAAaL,GAC3BM,YAClBX,EAAe,IAAIQ,IAAOI,SAC9B5B,EACA6B,EAAWC,IACXP,GAGFN,EAAgBD,QAEhBe,QAAQC,IAAI,+BAEb,IAEHZ,qBAAU,WACR,IAAMa,EAAa,uCAAG,8BAAAC,EAAA,sEAElBH,QAAQC,IAAI,uCAFM,SAKUhB,EAAamB,0BALvB,OAKZC,EALY,OAMlBL,QAAQC,IAAI,iBAAkBI,GAIxBtB,EAAasB,EAAcC,KAAI,SAACnC,GAAD,OACnCD,EAAuBC,MAIzBa,EAAcD,GAfI,kDAiBlBiB,QAAQO,MAAM,4CAAd,MAjBkB,0DAAH,qDAuBbC,EAAe,uCAAG,WAAOC,EAAQC,EAASC,GAAxB,eAAAR,EAAA,yDACtBH,QAAQC,IAAR,uCACkCQ,EADlC,qBACqDC,EAAQnC,WAD7D,4BAC2FoC,EAAepC,cAGtGU,EALkB,gCAMOA,EAAa2B,qBANpB,OAMdC,EANc,OAOpBb,QAAQC,IAAI,iBAAkBY,GAC9BhC,EAAgBX,EAAuB2C,IARnB,2CAAH,0DAiBrB,OALI5B,IACFiB,IACAjB,EAAa6B,GAAG,qBAAsBN,IAGjC,WACDvB,GACFA,EAAa8B,IAAI,qBAAsBP,MAG1C,CAACvB,IAiBJ,OACE,sBAAKN,UAAU,6BAAf,UACE,0DACCI,EAAWiC,OAAS,GACrB,qBAAKrC,UAAU,iBAAf,SAlBFI,EAAWuB,KAAI,SAACW,EAAWC,GAAZ,OACb,sBAAKvC,UAAU,iBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,4BAAIsC,EAAU7C,SAEhB,qBAAK+C,IAAG,2CAAsCF,EAAU5C,UAAY+C,IAAKH,EAAU7C,OACnF,wBACEiD,KAAK,SACL1C,UAAU,wBACV2C,SA9FwBC,EA8FQL,EA9FT,sBAAiB,4BAAAf,EAAA,mEAExClB,EAFwC,wBAK1CG,GAAoB,GACpBY,QAAQC,IAAI,oCAN8B,SAOpBhB,EAAauC,cAAcD,GAPP,cAOpCE,EAPoC,gBAQpCA,EAAQC,OAR4B,OAS1C1B,QAAQC,IAAI,WAAYwB,GATkB,0DAY5CzB,QAAQ2B,KAAK,6BAAb,MAEAvC,GAAoB,GAdwB,2DA2F1C,wBAIU6B,EAAU7C,UATe6C,EAAU7C,MAtFpB,IAACmD,OA0G3BpC,GACC,sBAAKR,UAAU,UAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,IACA,oEAEF,qBACEwC,IAAI,iIACJC,IAAI,qC,QC8BDQ,G,MAtJD,SAAC,GAAuC,IAArCf,EAAoC,EAApCA,aAAchC,EAAsB,EAAtBA,gBAE7B,EAAwCC,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAwBJ,mBAAS,MAAjC,mBAAO+C,EAAP,KAAaC,EAAb,KACA,EAAsChD,mBAAS,IAA/C,mBAAOiD,EAAP,KAAoBC,EAApB,KACA,EAAkClD,oBAAS,GAA3C,mBAAOmD,EAAP,KAAkBC,EAAlB,KAGA7C,qBAAU,WACR,IAAQC,EAAaC,OAAbD,SAER,GAAIA,EAAU,CACZ,IACME,EADW,IAAIC,IAAOC,UAAUC,aAAaL,GAC3BM,YAClBX,EAAe,IAAIQ,IAAOI,SAC9B5B,EACA6B,EAAWC,IACXP,GAGFN,EAAgBD,QAEhBe,QAAQC,IAAI,+BAEb,IAEHZ,qBAAU,WACR,IAAM8C,EAAS,uCAAG,4BAAAhC,EAAA,sEACMlB,EAAamD,aADnB,OACVC,EADU,OAEhBrC,QAAQC,IAAI,QAASoC,GACrBP,EAAQ5D,EAAuBmE,IAHf,2CAAH,qDAOTC,EAAmB,SAACC,EAAWC,GAC/B,IAAMC,EAASF,EAAUhE,WACnBmE,EAAWF,EAAYjE,WAE7ByB,QAAQC,IAAR,mCAAwCwC,EAAxC,uBAA6DC,IAG7DZ,GAAQ,SAACa,GACL,OAAO,2BAAKA,GAAZ,IAAuBrE,GAAImE,OAE/B5D,GAAgB,SAAC8D,GACb,OAAO,2BAAKA,GAAZ,IAAuBrE,GAAKoE,QASpC,OALIzD,IACAkD,IACAlD,EAAa6B,GAAG,iBAAkBwB,IAG/B,WACDrD,GACAA,EAAa8B,IAAI,iBAAkBuB,MAG1C,CAACrD,IAEJ,IAAM2D,EAAe,uCAAG,4BAAAzC,EAAA,mEAEhBlB,EAFgB,wBAGlB+C,EAAe,aACfhC,QAAQC,IAAI,qBAJM,SAKMhB,EAAa4D,aALnB,cAKZC,EALY,gBAMZA,EAAUpB,OANE,OAOlB1B,QAAQC,IAAI,aAAc6C,GAC1Bd,EAAe,OAEfE,GAAa,GACba,YAAW,WACTb,GAAa,KACZ,KAbe,0DAgBpBlC,QAAQO,MAAM,wBAAd,MACAyB,EAAe,IAjBK,0DAAH,qDAqBrB,OACE,sBAAKrD,UAAU,kBAAf,UAEGkD,GAAQhB,GACP,qBAAKmC,GAAG,QAAQrE,UAAWsD,EAAY,OAAS,GAAhD,SACE,qBAAKe,GAAG,OAAR,gCAAsBnB,EAAKzD,KAA3B,wBAA+CyC,EAAapC,aAA5D,SAKHoD,GACC,sBAAKlD,UAAU,iBAAf,UACE,sBAAKA,UAAS,wBAAmBoD,GAAjC,UACE,+CAAQF,EAAKzD,KAAb,mBACA,sBAAKO,UAAU,gBAAf,UACE,qBAAKwC,IAAKU,EAAKxD,SAAU+C,IAAG,eAAUS,EAAKzD,QAC3C,sBAAKO,UAAU,aAAf,UACE,0BAAUsE,MAAOpB,EAAKvD,GAAI4E,IAAKrB,EAAKrD,QACpC,sCAAOqD,EAAKvD,GAAZ,cAAoBuD,EAAKrD,MAAzB,kBAIN,qBAAKG,UAAU,mBAAf,SACE,wBAAQA,UAAU,aAAa2C,QAASsB,EAAxC,uCACgBf,EAAKzD,UAGN,cAAhB2D,GACC,sBAAKpD,UAAU,oBAAf,UACE,cAAC,EAAD,IACA,6DAOPkC,GACC,qBAAKlC,UAAU,oBAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,gDACA,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,6BAAKkC,EAAazC,OAClB,qBACE+C,IAAG,2CAAsCN,EAAaxC,UACtD+C,IAAG,oBAAeP,EAAazC,QAEjC,sBAAKO,UAAU,aAAf,UACE,0BAAUsE,MAAOpC,EAAavC,GAAI4E,IAAKrC,EAAarC,QACpD,sCAAOqC,EAAavC,GAApB,cAA4BuC,EAAarC,MAAzC,eAGJ,qBAAKG,UAAU,QAAf,SACE,mEAA0BkC,EAAapC,+BC/IxC,MAA0B,yCCWnC0E,EAAiB,iBACjBC,EAAY,8BAA0BD,GA6I7BE,EA3IH,WAEV,MAA4CvE,mBAAS,MAArD,mBAAOwE,EAAP,KAAuBC,EAAvB,KACA,EAAwCzE,mBAAS,MAAjD,mBAAO+B,EAAP,KAAqBhC,EAArB,KACA,EAAkCC,oBAAS,GAA3C,mBAAO0E,EAAP,KAAkBC,EAAlB,KAGMC,EAAwB,uCAAG,kCAAAvD,EAAA,oEAERZ,OAAbD,EAFqB,EAErBA,SAFqB,uBAK3BU,QAAQC,IAAI,gCAEZwD,GAAa,GAPc,iCAU3BzD,QAAQC,IAAI,8BAA+BX,GAVhB,UAYJA,EAASqE,QAAQ,CAAEC,OAAQ,iBAZvB,QAcH,KAFlBC,EAZqB,QAcd7C,QACL8C,EAAUD,EAAS,GACzB7D,QAAQC,IAAI,+BAAgC6D,GAC5CP,EAAkBO,IAElB9D,QAAQC,IAAI,+BAnBa,0DAuB7BD,QAAQC,IAAR,MAvB6B,0DAAH,qDAyDxB8D,EAAmB,uCAAG,gCAAA5D,EAAA,oEAEHZ,OAAbD,EAFgB,EAEhBA,SAFgB,uBAKtB0E,MAAM,iBALgB,0CAQD1E,EAASqE,QAAQ,CACtCC,OAAQ,wBATc,OAQlBC,EARkB,OAYxB7D,QAAQC,IAAI,YAAa4D,EAAS,IAClCN,EAAkBM,EAAS,IAbH,kDAexB7D,QAAQC,IAAR,MAfwB,0DAAH,qDAoDzB,OAjCAZ,qBAAU,WACRoE,GAAa,GACbC,MACC,IAEHrE,qBAAU,WACR,IAAM4E,EAAgB,uCAAG,kCAAA9D,EAAA,6DACvBH,QAAQC,IAAI,yCAA0CqD,GAEhDY,EAAW,IAAIzE,IAAOC,UAAUC,aAAaJ,OAAOD,UACpDE,EAAS0E,EAAStE,YAClBX,EAAe,IAAIQ,IAAOI,SAC9B5B,EACAkG,EAAWpE,IACXP,GARqB,SAWLP,EAAa2B,qBAXR,QAWjBwD,EAXiB,QAYfhG,MACN4B,QAAQC,IAAI,0BACZpB,EAAgBX,EAAuBkG,KAEvCpE,QAAQC,IAAI,0BAhBS,2CAAH,qDAoBlBqD,IACFtD,QAAQC,IAAI,kBAAmBqD,GAC/BW,KAEFR,GAAa,KACZ,CAACH,IAGF,sBAAK3E,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,uBAAb,uDACA,mBAAGA,UAAU,WAAb,uDACA,mBAAGA,UAAU,WAAb,oCAxFF6E,EACK,cAAC,EAAD,IAGJF,EAgBMA,IAAmBzC,EACrB,cAAC,EAAD,CAAiBhC,gBAAiBA,IAEhCyE,GAAkBzC,EAEzB,cAAC,EAAD,CAAOA,aAAcA,EAAchC,gBAAiBA,SAFjD,EAjBH,sBAAKF,UAAU,2BAAf,UACE,qBACEwC,IAAI,0EACJC,IAAI,kBAEN,wBACEzC,UAAU,mCACV2C,QAASyC,EAFX,+CAiFF,sBAAKpF,UAAU,mBAAf,UACE,qBAAKyC,IAAI,eAAezC,UAAU,eAAewC,IAAKkD,IACtD,oBACE1F,UAAU,cACV2F,KAAMlB,EACNmB,OAAO,SACPC,IAAI,aAJN,6BAKcrB,GALd,gCCzIVsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c272d3bd.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = '0x62b0c318D1102eD82ccD0dc2fA8d0Dc673e83B24';\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name:         characterData.name,\n    imageURI:     characterData.imageURI,\n    HP:           characterData.HP.toNumber(),\n    maxHP:        characterData.maxHP.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport LoadingIndicator from '../LoadingIndicator';\nimport myEpicGame from '../../utils/MyEpicGame.json';\n\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n\n\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacter(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn:', mintTxn);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n\n      setMintingCharacter(false);\n    }\n  };\n\n\n  useEffect(() => {\n    const { ethereum } = window;\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n        \n        //Call contract to get all mint-able characters\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n\n\n        //Go through all of our characters and transform the data\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        //Set all mint-able characters in state\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n\n\n    //Add a callback method that will fire when this event is received\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFTs();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={`https://cloudflare-ipfs.com/ipfs/${character.imageURI}`} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint your NFT to Battle!</h2>\n      {characters.length > 0 && (\n      <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Unlocking the Gates to Battle...</p>\n          </div>\n          <img\n            src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n    )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport LoadingIndicator from '../LoadingIndicator';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\n\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState('');\n  const [showToast, setShowToast] = useState(false);\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n  \n  useEffect(() => {\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n\n    const onAttackComplete = (newBossHP, newPlayerHP) => {\n          const bossHP = newBossHP.toNumber();\n          const playerHP = newPlayerHP.toNumber();\n\n          console.log(`AttackComplete: Boss HP: ${bossHP} Player Hp: ${playerHP}`);\n\n          //Update both player and boss Hp\n          setBoss((prevState) => {\n              return { ...prevState, HP: bossHP };\n          });\n          setCharacterNFT((prevState) => {\n              return { ...prevState, HP : playerHP };\n          });\n        }\n\n      if (gameContract) {\n          fetchBoss();\n          gameContract.on('AttackComplete', onAttackComplete);\n      }\n\n      return () => {\n        if (gameContract) {\n            gameContract.off('AttackComplete', onAttackComplete);\n        }\n      }\n  }, [gameContract]);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn);\n        setAttackState('hit');\n\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  };\n\n  return (\n    <div className=\"arena-container\">\n      {/* Add your toast HTML right here */}\n      {boss && characterNFT && (\n        <div id=\"toast\" className={showToast ? 'show' : ''}>\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content  ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.HP} max={boss.maxHP} />\n                <p>{`${boss.HP} / ${boss.maxHP} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {attackState === 'attacking' && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Character NFT */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={`https://cloudflare-ipfs.com/ipfs/${characterNFT.imageURI}`}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.HP} max={characterNFT.maxHP} />\n                  <p>{`${characterNFT.HP} / ${characterNFT.maxHP} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n          {/* <div className=\"active-players\">\n            <h2>Active Players</h2>\n            <div className=\"players-list\">{renderActivePlayersList()}</div>\n          </div> */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport MyEpicGame from './utils/MyEpicGame.json';\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena  from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from 'ethers';\n\n// Constants\nconst TWITTER_HANDLE = '@Tylertheidiot';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n\n        setIsLoading(false);\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://www.reactiongifs.com/wp-content/uploads/2013/03/entertained.gif\"\n            alt=\"Gladiator Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Battle!\n          </button>\n        </div>\n      );\n\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n\n    } else if (currentAccount && characterNFT) {\n      return(\n        <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n      )\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        MyEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFTs();\n      if (txn.name) {\n        console.log('User has character NFT');\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n    };\n\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n    setIsLoading(false);\n  }, [currentAccount]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ NFT Battle Zone ⚔️</p>\n          <p className=\"sub-text\">Team up to protect the Polygon Metaverse,</p>\n          <p className=\"sub-text\">and defeat Fred Durst!</p>\n          {renderContent()}\n          </div>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by ${TWITTER_HANDLE}`} with BuildSpace.so</a>\n        </div>\n      </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}